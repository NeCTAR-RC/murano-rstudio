#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: au.org.nectar
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  conf: io.murano.configuration

Name: au.org.nectar.RStudio

Extends: std:Application

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()
  recordSet:
    Contract: $.class(res:RecordSet)
  username:
    Contract: $.string()
  password:
    Contract: $.string()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating instance...')
          - $securityGroupIngress:
            - ToPort: 80
              FromPort: 80
              IpProtocol: tcp
              External: true
            - ToPort: 443
              FromPort: 443
              IpProtocol: tcp
              External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $.instance.deploy()
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('setup.template').bind(dict(username => $.username, password => $.password))
          - $._environment.reporter.report($this, 'Instance created. Running setup...')
          - $.instance.agent.call($template, $resources)
          - $ipaddr: $.instance.ipAddresses.first()
          - $._environment.reporter.report($this, 'SSH will be available at ' + $.username + '@' + $ipaddr)
          - If: $.recordSet.zone and bool($.recordSet.name)
            Then:
              - $._environment.reporter.report($this, 'Setting up DNS record')
              - $.recordSet.create([$ipaddr])
              - $._environment.reporter.report($this, 'Setting up HTTPS configuration...')
              - $email: std:User.getEnvironmentOwner().email
              - $._environment.reporter.report($this, 'Certbot notifications email set to ' + $email)
              - $fqdn: $.recordSet.name + '.' + regex('[.]$').replace($.recordSet.zone, '')
              - $fingerprint: $.enableHttpsCertbot($fqdn, $email)
              - $proto: 'https'
              - $._environment.reporter.report($this, 'HTTPS SHA256 Fingerprint ' + $fingerprint)
            Else:
                - $._environment.reporter.report($this, 'DNS zone not provided, not setting up HTTPS')
                - $proto: 'http'
                - $fqdn: $ipaddr
          - $._environment.reporter.report($this, 'R-Studio is available at ' + $proto + '://' + $fqdn)
          - $.setAttr(deployed, true)

  enableHttpsCertbot:
    Arguments:
      - fqdn:
          Contract: $.string().notNull()
      - email:
          Contract: $.string().notNull()
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('certbot.template').bind(dict(fqdn=>$fqdn, email=>$email))
      - $._environment.reporter.report($this, 'Setting up Certbot...')
      - $fingerprint: $.instance.agent.call($template, $resources)
      - Return: $fingerprint
